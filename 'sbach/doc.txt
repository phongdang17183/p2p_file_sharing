luu data tren db: (luu metadata tren db)
khi register xong phai tra ve peer id de gan cho peer
piece_size tam thoi se de co dinh (512KB)

info_hash: -> sha1
{
    file: {
        file_size: int
        path: string
    }
    piece_length: int
    peice_count: int
    list_pieces: [
        piece: string
    ]
}

file_info: -> json
{
    file_name: string
    description: string
    file_size: int,
    peer_id: string
    peer_port: self.peer_port,
    info_hash: info_hash,
    piece_count: int,
    piece_size: int,
}

torrent_file: -> bencode 
{
    announce: string (url cua tracker)
    info: {
        file_name: string,
        file_size: string,
        piece_size: int,
        pieces:  'pieces': b''.join(pieces),  # Concatenate the hashes list of piece (sha1)
    }
}


tren db se chua: 
file_info: bieu thi thong tin cac file hien cho
peer_id: luu thong tin cai peer id va dia chi cua chung
torrent_file: chua thong tin cua file   

se co 1 interface tracker site de tuong tac voi tracker (vi tracker se la 1 web viet bang nodejs)

client se co cac chuc nang chinh:
- register: thong bao cho tracker biet minh hoat dong, dong thoi gui torrent cac file moi ?!
- sign in:

trong peer se dung thread voi deamon=true de khi thoat ra thi dong het thread lai

protocol


Tracker
Mỗi tracker có quản lý một/nhiều torrent file. Một torrent file sẽ bao gồm nhiều file.
Torrent file sẽ lưu metainfo bao gồm: danh sách peer, số piece của file, độ dài piece của file.
Đầu tiên, tracker sẽ nhận message từ node. Message này sẽ bao gồm request start/stop/complete, peer id (?), magnet text trỏ tới torrent file (mỗi torrent file chứa metainfo của nhiều file), số lượng byte của file mà node này đã có nếu là request start.
Tracker sẽ phản hồi lại node với message bao gồm: tracker id (?), failure reason hoặc warning trong trường hợp có lỗi (ví dụ không tìm thấy torrent?), nếu request là start thêm node vào list và gửi list lại cho node, nếu request là stop xóa node khỏi list và gửi thông báo đã stop thành công (còn complete thì đề bắt có nhưng chưa hiểu nó khác stop chỗ nào :)))) chắc là stop thì là dừng ngang còn complete nghĩa là nó đã tải xong file). Chỗ này thì t nghĩ là stop thì dừng xóa khỏi list luôn còn complete tức là tải xong file, sẵn sàng để trở thành seeder.
 Bằng cách này, tracker có thể quản lý được số peer đang có trong torrent. (tracker protocol 15%)
Node
Sau khi nhận list peer từ tracker, node sẽ gửi request đến các peer trong list, yêu cầu gửi danh sách file pieces mà node đó có (request này có chứa tên file). Sau đó node sẽ dựa vào danh sách pieces để request các pieces khác nhau từ các peer khác nhau (multithread download). Việc request list và piece sẽ được lặp đi lặp lại cho đến khi node đó đã có đầy đủ file. (torrent download 30%)
Một node có một số lượng pieces của một file sẽ trở thành seeder của file đó (trả lời request từ các peer khác bằng cách upload piece cho các peer đó (multithread upload)). (torrent upload 30%)
Download và upload sẽ được thực hiện theo giải thuật rarest-first.
Node sẽ phải có cơ chế ghép cái piece lại thành một file hoàn chỉnh.  (MDDT - 20%)
Thay vì tracker phải resend list mỗi lần list được update thì các node sẽ tự động thêm vào list đang có trên máy của mình nếu nhận được request từ các node mới ở trong cùng torrent cũng như khi nhận được thông báo node được request đã thoát khỏi torrent -> giảm overhead cho tracker.
Design
Trên tracker có các thread server để reply đến các client
Trên tracker sẽ quản lý metainfo torrent file bao gồm các thông tin độ dài piece, số piece (của nhiều file), danh sách cái peer có trong torrent.
Trên node có 2 loại thread là server thread và client thread để thực hiện upload và download đồng thời.
Trên node sẽ có file, metainfo file, danh sách cái peer có trong torrent, các danh sách piece mà cái peer đó có. 

